// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Cores.ApplicationDbContext;

#nullable disable

namespace Cores.Migrations
{
    [DbContext(typeof(ApplicationDb))]
    partial class ApplicationDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PolicyTableUserGroup", b =>
                {
                    b.Property<string>("GroupsGroupId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PoliciesPolicyId")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("GroupsGroupId", "PoliciesPolicyId");

                    b.HasIndex("PoliciesPolicyId");

                    b.ToTable("PolicyTableUserGroup");
                });

            modelBuilder.Entity("Cores.Entities.PolicyTable", b =>
                {
                    b.Property<string>("PolicyId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PolicyType")
                        .HasColumnType("int");

                    b.HasKey("PolicyId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Cores.Entities.UserGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Cores.Entities.UserInfo", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Cores.Entities.UserRequest", b =>
                {
                    b.Property<long>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RequestId"));

                    b.Property<DateTime?>("CompletionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RequestCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RequestedByUserUserId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("RequestedByUserUserId");

                    b.ToTable("UserRequests");
                });

            modelBuilder.Entity("UserGroupUserInfo", b =>
                {
                    b.Property<string>("GroupsGroupId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("GroupsGroupId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("UserGroupUserInfo");
                });

            modelBuilder.Entity("PolicyTableUserGroup", b =>
                {
                    b.HasOne("Cores.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cores.Entities.PolicyTable", null)
                        .WithMany()
                        .HasForeignKey("PoliciesPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cores.Entities.UserRequest", b =>
                {
                    b.HasOne("Cores.Entities.UserInfo", "RequestedByUser")
                        .WithMany("Requests")
                        .HasForeignKey("RequestedByUserUserId");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("UserGroupUserInfo", b =>
                {
                    b.HasOne("Cores.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cores.Entities.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cores.Entities.UserInfo", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
